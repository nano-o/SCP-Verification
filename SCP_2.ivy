#lang ivy1.7

include order

type node
relation intact(N:node)

type quorum

relation member(N:node, Q:quorum)
type bset # blocking sets
relation bset_member(N:node, B:bset)
relation blocking(N:node, B:bset)

instance value : bounded_sequence(nat)
instance round : bounded_sequence(nat)

type ballot = struct {
    n:round,
    x:value
}

# TODO: this does not seem to work:
# type statement = {abort, commit}
type statement
individual commit:statement
individual abort:statement
trusted isolate commit_abort_iso = {
    property commit ~= abort
    property X = commit | X = abort 
}

trusted isolate fbas_axiomatization = {
    axiom intact(N1) & intact(N2) & member(N1,Q1) & member(N2,Q2) -> exists N3 . intact(N3) & member(N3,Q1) & member(N3,Q2)
    axiom intact(N) & blocking(N,BL) -> exists N2 . intact(N2) & bset_member(N2,B)
}

isolate federated_voting = {

    specification {
        
        relation vote(N:node, B:ballot, S:statement)
        relation accept(N:node, B:ballot, S:statement)
        relation confirm(N:node, B:ballot, S:statement)

        
        invariant ~(intact(N1) & intact(N2) & accept(N1,B1,S1) & accept(N2,B1,S2) & S1 ~= S2)
        invariant ~(intact(N1) & intact(N2) & confirm(N1,B1,S1) & confirm(N2,B1,S2) & S1 ~= S2)

        invariant ~(intact(N1) & vote(N1,B,S1) & vote(N1,B,S2) & S1 ~= S2)
        invariant intact(N1) & accept(N1,B1,S1) -> exists Q . (exists N3 . intact(N3) & member(N3,Q)) & (forall N2 . intact(N2) & member(N2, Q) -> vote(N2,B1,S1))
        invariant intact(N1) & confirm(N1,B1,S1) -> exists Q . member(N1,Q) & forall N2 . intact(N2) & member(N2,Q) -> accept(N2,B1,S1)
        
        after init {
            vote(N,B,S) := false;
            accept(N,B,S) := false;
            confirm(N,B,S) := false;
        }
        
        action do_vote(n:node, b:ballot, s:statement) = {
            require ~(vote(n, b, S) & s ~= S);
            vote(n, b, s) := true
        }

        action do_accept(n:node, b:ballot, s:statement) = {
            require (exists Q . member(n,Q) & forall N . member(N,Q) -> (vote(N,b,s) | accept(N,b,s))) | (exists B . blocking(n,B) & forall N . bset_member(N,B) -> accept(N,b,s));
            accept(n, b, s) := true;
        }

        action do_confirm(n:node, b:ballot, s:statement) = {
            require exists Q . member(n,Q) & forall N . member(N,Q) -> accept(N,b,s);
            confirm(n,b,s) := true;
        }
    }
} with fbas_axiomatization

isolate ballot_order = {
    definition (B1 < B2) = (n(B1) < n(B2)) | (n(B1) = n(B2) & x(B1) < x(B2))
    definition (B1:ballot <= B2) = (B1 < B2 | B1 = B2)
    instantiate totally_ordered(ballot)
} with value, round

isolate simple_ballot_protocol = {
    
    relation vote(N:node, B:ballot, S:statement)
    relation accept(N:node, B:ballot, S:statement)
    relation confirm(N:node, B:ballot, S:statement)

    invariant [safety] ~(intact(N1) & intact(N2) & confirm(N1,B1,commit) & confirm(N2,B2,commit) & x(B1) ~= x(B2))

    # the main invariant:
    invariant ~(vote(N,B2,commit) & B1 < B2 & x(B1) ~= x(B2) & ~confirm(N,B1,abort))

    # validity properties:
    invariant (exists N . intact(N) & accept(N,B,S)) -> (exists N2 . intact(N2) & vote(N2,B,S))
    invariant (exists N . intact(N) & confirm(N,B,S)) -> (exists N2 . intact(N2) & vote(N2,B,S))

    # a node does not cast contradictory votes
    invariant ~(vote(N,B,S1) & vote(N,B,S2) & S1 ~= S2)

    # federated_voting invariants:
    invariant ~(intact(N1) & intact(N2) & accept(N1,B1,S1) & accept(N2,B1,S2) & S1 ~= S2)
    invariant ~(intact(N1) & intact(N2) & confirm(N1,B1,S1) & confirm(N2,B1,S2) & S1 ~= S2)

    invariant ~(intact(N1) & vote(N1,B,S1) & vote(N1,B,S2) & S1 ~= S2)
    invariant intact(N1) & accept(N1,B1,S1) -> exists Q . (exists N3 . intact(N3) & member(N3,Q)) & (forall N2 . intact(N2) & member(N2, Q) -> vote(N2,B1,S1))
    invariant intact(N1) & confirm(N1,B1,S1) -> exists Q . member(N1,Q) & forall N2 . intact(N2) & member(N2,Q) -> accept(N2,B1,S1)

    after init {
        vote(N,B,S) := false;
        accept(N,B,S) := false;
        confirm(N,B,S) := false;
    }

    action vote_abort(n:node, b:ballot) = {
        require ~(vote(n,b,S) & S ~= abort);
        vote(n,b,abort) := true;
    }
    
    action vote_commit(n:node, b:ballot) = {
        require B < b & x(B) ~= x(b) -> confirm(n,B,abort);
        require ~(vote(n,b,S) & S ~= commit);
        vote(n,b,commit) := true;
    }

    relation condition_accept(N:node, B:ballot, S:statement)
    definition condition_accept(v:node,b:ballot,s:statement) =
        (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,b,s) | accept(N,b,s)))
        | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,b,s))

    action do_accept(n:node, b:ballot, s:statement) = {
        require condition_accept(n,b,s);
        accept(n,b,s) := true;
    }

    action do_confirm(n:node, b:ballot, s:statement) = {
        require exists Q . member(n,Q) & forall N . member(N,Q) -> accept(N,b,s);
        confirm(n,b,s) := true;
    }

    export vote_abort
    export vote_commit
    export do_accept
    export do_confirm
    
} with ballot_order, fbas_axiomatization, commit_abort_iso
