#lang ivy1.6

# Nomination and federated-voting are black-boxes whose properties are assumed

include order

object protocol = {

    type node
    relation well_behaved(N:node)
    relation intact(N:node)
    axiom ~(intact(N) & ~well_behaved(N))

    type value
    type ballot
    instantiate totally_ordered(ballot)
    instantiate totally_ordered(value)
    #instance value : bounded_sequence(nat)
    #instance ballot : bounded_sequence(nat)

    relation vote_prepare(N:node, B:ballot, V:value)
    relation confirmed_prepared(N:node, B:ballot, V:value)
    relation vote_commit(N:node, B:ballot, V:value)
    relation confirmed_committed(N:node, B:ballot, V:value)
    relation nomination_output(N:node, V:value)
    relation started(N:node, B:ballot)
    relation left_ballot(N:node, B:ballot)
    # ghost:
    relation voted_prepare(N:node, B:ballot)
    relation voted_commit(N:node, B:ballot)
    relation intact_voted_prepare(B:ballot, V:value)
    relation intact_voted_commit(B:ballot, V:value)

    conjecture [safety] ~(intact(N1) & intact(N2) & confirmed_committed(N1,B1,V1) & confirmed_committed(N2,B2,V2) & V1 ~= V2)
    conjecture ~(vote_commit(N1,B1,V) & intact(N1) & ~confirmed_prepared(N1,B1,V))
    conjecture ~(intact(N1) & intact(N2) & confirmed_committed(N1,B1,V1) & B1 <= B2 & V1 ~= V2 & confirmed_prepared(N2,B2,V2))
    #conjecture intact(N1) & intact(N2) & confirmed_committed(N1,B1,V1) & B1 <= B2 & V1 ~= V2 -> ~confirmed_prepared(N2,B2,V2)
    conjecture ~(intact(N1) & confirmed_committed(N1,B,V) & forall N2 . intact(N2) -> ~vote_commit(N2,B,V))
    conjecture ~(left_ballot(N,B) & B2 < B & ~left_ballot(N,B2))
    conjecture ~(intact(N) & started(N,B) & B0 < B & ~left_ballot(N,B0))
    conjecture intact(N) & voted_prepare(N,B) -> started(N,B)
    conjecture intact(N) & vote_prepare(N,B,V) -> voted_prepare(N,B)
    conjecture intact(N) & vote_prepare(N,B,V) & vote_prepare(N,B,V2) -> V = V2
    
    after init {
        vote_prepare(N,B,V) := false;
        confirmed_prepared(N,B,V) := false;
        vote_commit(N,B,V) := false;
        confirmed_committed(N,B,V) := false;
        nomination_output(N,X) := false;
        left_ballot(N,B) := false;
        started(N,B) := false;
        voted_prepare(N,B) := false;
        voted_commit(N,B) := false;
        intact_voted_prepare(B,V) := false;
        intact_voted_commit(B,V) := false;
        # there are finitely many nodes:
        l2s_d(N:node) := true;
    }

    ## Basic actions

    action byz_action = {
        vote_prepare(N,B,X) := *;
        assume ~(well_behaved(N) & (vote_prepare(N,B,X) ~= old vote_prepare(N,B,X)));
        vote_commit(N,B,X) := *;
        assume ~(well_behaved(N) & (vote_commit(N,B,X) ~= old vote_commit(N,B,X)));
        confirmed_prepared(N,B,V) := *;
        assume ~(well_behaved(N) & (confirmed_prepared(N,B,X) ~= old confirmed_prepared(N,B,X)));
        confirmed_committed(N,B,V) := *;
        assume ~(well_behaved(N) & (confirmed_committed(N,B,X) ~= old confirmed_committed(N,B,X)));
    }

    action change_ballot(n:node, b:ballot) = {
        assume ~left_ballot(n,b);
        left_ballot(n,B) := B < b;
        started(n,b) := true;
        # vote to commit stuff that has already been prepared. TODO: why?
        # vote_commit(n,b,V) := confirmed_prepared(n,b,V);
    }

    action nomination_update(n:node, v:value) = {
        nomination_output(n, V) := V = v
    }
    
    action prepare(n:node, b:ballot, bmax:ballot, vmax:value) = { # TODO: why is this not in change_ballot?
        assume ~left_ballot(n,b);
        assume started(n,b);
        assume ~vote_prepare(n,b,V);
        # use the highest confirmed prepared value or, if none exists, the nomination output:
        assume
        ((forall B,V . B < b -> ~confirmed_prepared(n,B,V)) & nomination_output(n,vmax))
        | (bmax < b & confirmed_prepared(n,bmax,vmax) & (forall B,V . B < b & confirmed_prepared(n,B,V) -> (B < bmax | (B = bmax & V <= vmax))));
        vote_prepare(n, b, vmax) := true;
        voted_prepare(n,b) := true;
        if (forall N . intact(N) -> vote_prepare(n, b, vmax)) {
            intact_voted_prepare(b, vmax) := true;
        }
    }

    action confirm_commit(n:node, b:ballot, v:value) = {
        # assumptions come from the specification of federated voting:
        assume exists N . intact(N) & vote_commit(N,b,v);
        assume intact(N) & b <= B & V ~= v -> ~confirmed_prepared(N,B,V);
        confirmed_committed(n,b,v) := true;
    }

    action confirm_prepare(n:node, b:ballot, v:value) = { # TODO: should we jump to b if higher than the current ballot?
        # assumptions come from the specification of federated voting:
        assume exists N . intact(N) & vote_prepare(N,b,v);
        assume intact(N) & B <= b & V ~= v -> ~confirmed_committed(N,B,V);
        confirmed_prepared(n,b,v) := true;
        if (~left_ballot(n,b) & started(n,b)) {
            vote_commit(n, b, v) := true;
            voted_commit(n, b) := true;
            if (forall N . intact(N) -> vote_commit(N, b, v)) {
                intact_voted_commit(b, v) := true;
            }
        }
    }

    export change_ballot
    export confirm_commit
    export byz_action
    export nomination_update
    export confirm_prepare
    export prepare

    isolate safety_proof = protocol with ballot

    isolate liveness = {
        individual b0:ballot # the good ballot
        individual n0:node # the node that never confirms v0 or v1
        individual v0:value # nomination output at b0
        individual v1:value # highest prepared at b0
        individual n1:node # node that prepares v1
        individual b1:ballot # corresponding ballot

        # relation prepared(B:ballot, V:value)
        # definition prepared(B:ballot, V:value) = B < b0 & (exists N . intact(N) & confirmed_prepared(N,B,V))
        # relation highest_prepared(B:ballot, V:value)
        # definition highest_prepared(B,V) = prepared(B,V)
        # & (forall V2,B2 . prepared(B2,V2) -> (B2 < B | (B2 = B & V2 <= V)))

        object spec = {
            temporal property (
            # if all intact nodes vote to prepare B,V then eventually all intact nodes confirm B,V as prepared
            (forall B,V,N1 . globally (intact_voted_prepare(B,V) & intact(N1) -> eventually confirmed_prepared(N1,B,V))) &
            # if all intact nodes vote to commit B,V then eventually all intact nodes confirm B,V as committed
            (forall B,V,N1 . globally (intact_voted_commit(B,V) & intact(N1) -> eventually confirmed_committed(N1,B,V))) &
            # b0 eventually starts:
            (forall N . intact(N) -> eventually started(N,b0)) &
            # intact nodes eventually vote to prepare something in b0:
            # TODO: only if they start b0
            (forall N . intact(N) -> eventually voted_prepare(N,b0)) &
            # ballot b0 never ends (this is how we model that b0 is long enough):
            (forall N . intact(N) -> globally ~left_ballot(N,b0)) &
            # v0 is nominated by all intact at b0:
            (forall N . intact(N) -> (globally (started(N,b0) -> nomination_output(N,v0)))) &
            # v0 is the unanimous nomination output at b0:
            (forall N1,N2,V1,V2 . globally (intact(N1) & intact(N2) & started(N1,b0) & started(N2,b0) & nomination_output(N1,V1) & nomination_output(N2,V2) -> V1 = V2)) &
            # all intact nodes have confirmed the same things when entering b0:
            (forall B,N1,N2,V . B < b0 & intact(N1) & intact(N2) -> globally (started(N1,b0) & started(N2,b0) & confirmed_prepared(N1,B,V) -> confirmed_prepared(N2,B,V))) &
            # no old confirmations happen during b0:
            (forall N . globally (intact(N) & started(N,b0) & B < b0 & ~confirmed_prepared(N,B,V) -> globally ~confirmed_prepared(N,B,V))) &
            # witnesses:
            ## if there is a highest confirmed prepared value below b0, then it is v1 at ballot b1:
            (forall N,B,V . globally (B < b0 & intact(N) & started(N,b0) & confirmed_prepared(N,B,V) -> (b1 < b0 & intact(n1) & started(n1,b0) & confirmed_prepared(n1,b1,v1) & (B < b1 | (B = b1 & V2 <= v1))))) &
            ## n0 is a witness for the existence of a node that never confirms:
            (forall N . intact(N) & globally ~confirmed_committed(N,B,V) -> (intact(n0) & globally ~(confirmed_committed(n0,B,V))))
            )
            #-> ((forall N . intact(N) -> eventually confirmed_committed(N,b0,v0)) | (forall N . intact(N) -> eventually confirmed_committed(N,b0,v1)))
            -> exists B,V . forall N . intact(N) -> eventually confirmed_committed(N,B,V) # TODO: is there a QA cycle because of this?
        }

        object impl = {

            # basic temporal info (this follows directly from the assumptions):
            conjecture globally (intact_voted_prepare(B,V) & intact(N1) -> eventually confirmed_prepared(N1,B,V))
            conjecture globally (intact_voted_commit(B,V) & intact(N1) -> eventually confirmed_committed(N1,B,V))
            conjecture intact(N) -> eventually started(N,b0)
            conjecture intact(N) -> eventually voted_prepare(N,b0)
            conjecture intact(N) -> globally ~left_ballot(N,b0)
            conjecture intact(N) -> (globally (started(N,b0) -> nomination_output(N,v0)))
            conjecture globally (intact(N1) & intact(N2) & started(N1,b0) & started(N2,b0) & nomination_output(N1,V1) & nomination_output(N2,V2) -> V1 = V2)
            conjecture B < b0 & intact(N1) & intact(N2) -> globally (started(N1,b0) & started(N2,b0) & confirmed_prepared(N1,B,V) -> confirmed_prepared(N2,B,V))
            conjecture globally (intact(N) & started(N,b0) & B < b0 & ~confirmed_prepared(N,B,V) -> globally ~confirmed_prepared(N,B,V))
            conjecture globally (B < b0 & intact(N) & started(N,b0) & confirmed_prepared(N,B,V) -> (b1 < b0 & intact(n1) & started(n1,b0) & confirmed_prepared(n1,b1,v1) & (B < b1 | (B = b1 & V2 <= v1))))
            conjecture intact(N) & globally ~confirmed_committed(N,B,V) -> (intact(n0) & globally ~(confirmed_committed(n0,B,V)))
            
            # the initial footprint TODO: finite number of intact
            conjecture l2s_d(N:node) & l2s_d(b0) & l2s_d(v0) & l2s_d(n0) & l2s_d(b1) & l2s_d(v1) & l2s_d(n1)
 
            conjecture intact(N) -> ~left_ballot(N,b0)
            # nomination outputs v0 in ballot b0:
            conjecture intact(N) & started(N,b0) -> nomination_output(N,v0)
            conjecture intact(N) & started(N,b0) & nomination_output(N,V) -> V=v0
            # all intact nodes have confirmed prepared the same things at b0: 
            conjecture intact(N) & B < b0 & intact(N2) & started(N,b0) & started(N2,b0) & confirmed_prepared(N,B,V) -> confirmed_prepared(N2,B,V)
            
            # (b1,v1) is the highest confirmed prepared value among intact nodes:
            conjecture intact(N) & started(N,b0) & B < b0 & confirmed_prepared(N,B,V) -> (B < b1 | (B = b1 & V2 <= v1)) & intact(n1) & b1 < b0 & confirmed_prepared(n1,b1,v1)
            # we conclude that intact nodes prepare v0 or v1 at b0
            conjecture intact(N) & vote_prepare(N,b0,V) -> (vote_prepare(N,b0,v0) | vote_prepare(N,b0,v1))
            # an intact node that confirmed something prepared before b0 prepares v1 in b0:
            conjecture intact(N) & voted_prepare(N,b0) & B < b0 & confirmed_prepared(N,B,V) -> vote_prepare(N,b0,v1)

            # if one intact node voted for v1 in b0 then all do:
            conjecture intact(N1) & intact(N2) & B < b0 & started(N2,b0) & confirmed_prepared(N2,B,V) & voted_prepare(N1,b0) -> vote_prepare(N1,b0,v1)
            # voting to prepare v1 at b0 means v1 was confirmed prepared at b1
            conjecture intact(N) & (v0 ~= v1) & vote_prepare(N,b0,v1) -> (b1 < b0 & confirmed_prepared(N,b1,v1))
            # voting to prepare v0 at b0 means that nothing was confirmed prepared before b0
            conjecture ~(intact(N) & (v0 ~= v1) & vote_prepare(N,b0,v0) & intact(N2) & started(N2,b0) & confirmed_prepared(N2,B,V) & B < b0)
            # intact nodes do not prepare different things:
            conjecture intact(N1) & intact(N2) & vote_prepare(N1,b0,V1) & vote_prepare(N2,b0,V2) -> V1 = V2

            # the culmination:
            conjecture intact(N) & voted_prepare(N,b0) -> (vote_prepare(N,b0,v0) | vote_prepare(N,b0,v1))

            # for now we have only used globally ... properties

            conjecture (forall N . intact(N) -> voted_prepare(N,b0)) -> (intact_voted_prepare(b0,v0) | intact_voted_prepare(b0,v1))
            conjecture intact(N) -> ( ($l2s_w N . voted_prepare(N,b0))(N) | voted_prepare(N,b0) )
            conjecture  (exists N . intact(N) & ($l2s_w N . voted_prepare(N,b0))(N)) | (forall N . intact(N) -> voted_prepare(N,b0))
            conjecture (exists N . intact(N) & ($l2s_w N . voted_prepare(N,b0))(N)) | intact_voted_prepare(b0,v0) | intact_voted_prepare(b0,v1)

            # here we need B = b0 etc. because things must be in the footprint
            conjecture intact(N) & B = b0 & (V = v0 | V = v1) -> (($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,B,V) | confirmed_prepared(N,B,V) | (globally ~confirmed_prepared(N,B,V)))
            conjecture intact_voted_prepare(B,V) & intact(N) & B = b0 & (V = v0 | V = v1) -> (($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,B,V) | confirmed_prepared(N,B,V))
            conjecture intact(N) & B = b0 & (V = v0 | V = v1) -> (($l2s_w N,B,V . confirmed_committed(N,B,V))(N,B,V) | confirmed_committed(N,B,V) | (globally ~confirmed_committed(N,B,V)))
            conjecture intact_voted_commit(B,V) & intact(N) & B = b0 & (V = v0 | V = v1) -> (($l2s_w N,B,V . confirmed_committed(N,B,V))(N,B,V) | confirmed_committed(N,B,V))

            conjecture intact(N) -> ( (exists N1 . intact(N1) & ($l2s_w N2 . voted_prepare(N2,b0))(N1)) | ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,b0,v0) | confirmed_prepared(N,b0,v0) | ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,b0,v1) | confirmed_prepared(N,b0,v1) )

            # intact nodes vote to commit a unique value (v0 or v1) at b0
            conjecture (exists N . intact(N) & confirmed_prepared(N,b0,V)) -> (exists N1 . intact(N1) & vote_prepare(N1,b0,V))
            conjecture intact(N) & vote_commit(N,b0,V) -> (V = v0 | V = v1)
            conjecture intact(N1) & intact(N2) & vote_commit(N1,b0,V1) & vote_commit(N2,b0,V2) -> V1 = V2

            conjecture intact(N) & voted_commit(N,b0) -> (vote_commit(N,b0,v0) | vote_commit(N,b0,v1))
            conjecture (forall N . intact(N) -> voted_commit(N,b0)) -> (intact_voted_commit(b0,v0) | intact_voted_commit(b0,v1))
            # okay up to here...
            #conjecture (exists N1 . intact(N1) & ($l2s_w N2 . voted_prepare(N2,b0))(N1)) | (exists N1 . intact(N1) & ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N1,b0,v0)) | (exists N1 . intact(N1) & ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N1,b0,v1)) | intact_voted_commit(b0,v0) | intact_voted_commit(b0,v1)
            
            # conjecture intact(N) -> ( (exists N1 . intact(N1) & ($l2s_w N2 . voted_prepare(N2,b0))(N1)) | ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,b0,v0) | ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,b0,v1) | ($l2s_w N,B,V . confirmed_committed(N,B,V))(N,b0,v0) | confirmed_committed(N,b0,v0) | ($l2s_w N,B,V . confirmed_committed(N,B,V))(N,b0,v1) | confirmed_committed(N,b0,v1) )
            
            #conjecture (exists N . intact(N) & ($l2s_w N . voted_prepare(N,b0))(N)) | (exists N . intact(N) & (($l2s_w N . confirmed_prepared(N,b0,v0))(N) | ($l2s_w N . confirmed_prepared(N,b0,v1))(N))) | (forall N . intact(N) -> confirmed_prepared(N,b0,v0)) |  (forall N . intact(N) -> confirmed_prepared(N,b0,v1))
            #conjecture false

            
            # conjecture (exists N . intact(N) & ($l2s_w N . voted_prepare(N,b0))(N)) | (forall N . intact(N) -> vote_prepare(N,b0,v0)) | (forall N . intact(N) -> vote_prepare(N,b0,v1))

            # conjecture intact(N)  & B = b0 -> ( ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,B,V) | (globally ~confirmed_prepared(N,B,V)) | confirmed_prepared(N,B,V) )
            # conjecture intact(N) & (V = v0 | V = v1) & B = b0 -> ( ($l2s_w N,B,V . confirmed_committed(N,B,V))(N,B,V) | (globally ~confirmed_committed(N,B,V)) | confirmed_committed(N,B,V) )
            
            # conjecture intact(N) & (V = v0 | V = v1) & B = b0 & started(N,b0) -> ( ($l2s_w N,B,V . confirmed_prepared(N,B,V))(N,B,V) | (globally ~confirmed_prepared(N,B,V)) | vote_commit(N,B,V) )
            
            # conjecture ~l2s_waiting -> ( (forall N . intact(N) -> vote_prepare(N,b0,v0)) | (forall N . intact(N) -> vote_prepare(N,b0,v1)) )
        }
    } with this, ballot, value
}
