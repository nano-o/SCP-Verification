#lang ivy1.7

include order

type node
relation intact(N:node)

type quorum
relation member(N:node, Q:quorum)
type bset # blocking sets
relation bset_member(N:node, B:bset)
relation blocking(N:node, B:bset)

instance value : bounded_sequence(nat)
instance round : bounded_sequence(nat)

type ballot = struct {
    n:round,
    x:value
}

# TODO: this does not seem to work:
# type statement = {abort, commit}
type statement
individual commit:statement
individual abort:statement
trusted isolate commit_abort_iso = {
    property commit ~= abort
    property X = commit | X = abort 
}

isolate ballot_order = {
    definition (B1 < B2) = (n(B1) < n(B2)) | (n(B1) = n(B2) & x(B1) < x(B2))
    definition (B1:ballot <= B2) = (B1 < B2 | B1 = B2)
    instantiate totally_ordered(ballot)
} with value, round

individual zero:ballot # the special 0 ballot
isolate ballot_zero_iso = {
    after init {
        zero.n := 0;
        zero.x := 0;
    }
    invariant zero.n = 0 & zero.x = 0
    invariant zero <= B
} with ballot_order, value, round

isolate abstract_protocol = {
            
    relation vote(N:node, B:ballot, S:statement)
    relation accept(N:node, B:ballot, S:statement)
    relation confirm(N:node, B:ballot, S:statement)
    
    invariant [safety] ~(intact(N1) & intact(N2) & confirm(N1,B1,commit) & confirm(N2,B2,commit) & x(B1) ~= x(B2))

    # the main invariant:
    invariant ~(intact(N) & vote(N,B2,commit) & B1 < B2 & x(B1) ~= x(B2) & ~confirm(N,B1,abort))
    # TODO: the following would be needed to show that it is safe to "vote to infinity" in phase commit. However this form a QA cycle with the validity properties.
    # invariant ~(intact(N) & vote(N,B2,commit) & B1 < B2 & x(B1) ~= x(B2) & ~(confirm(N,B1,abort) | exists B . B <= B1 & x(B) = x(B2) & accept(N,B,commit)))

    # validity properties:
    invariant (exists N . intact(N) & accept(N,B,S)) -> (exists N . intact(N) & vote(N,B,S))
    invariant (exists N . intact(N) & confirm(N,B,S)) -> (exists N . intact(N) & accept(N,B,S))

    # a node does not cast contradictory votes
    invariant ~(vote(N,B,S1) & vote(N,B,S2) & S1 ~= S2)

    # invariants implied by federated_voting:
    invariant ~(intact(N1) & intact(N2) & accept(N1,B,S1) & accept(N2,B,S2) & S1 ~= S2)
    invariant ~(intact(N1) & intact(N2) & confirm(N1,B,S1) & confirm(N2,B,S2) & S1 ~= S2)

    # this isolate axiomatizes something that should be proved in Isabelle/HOL:    
    trusted isolate isabelle_axiomatization = {
        
        specification {
            
            # a blocking set B for an intact node N must contain an intact node:
            property (exists N1 . intact(N1) & blocking(N1,BL)) -> exists N2 . intact(N2) & bset_member(N2,BL)
            
            after init {
                vote(N,B,S) := false;
                accept(N,B,S) := false;
                confirm(N,B,S) := false;
            }
            
            relation condition_accept(N:node, B:ballot, S:statement)
            definition condition_accept(v:node, b:ballot, s:statement) = # NOTE: can only be applied to constants. TODO: would be nice if we could generalize over B only and then apply it with v and s constants and B quantified.
            (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,b,s) | accept(N,b,s)))
            | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,b,s))

            relation condition_vote(N:node, B:ballot, S:statement)
            definition condition_vote(V:node, B:ballot, S:statement) =
            forall S2 . ~(vote(V,B,S2) & S ~= S2)

            relation condition_confirm(N:node, B:ballot, S:statement)
            definition condition_confirm(V:node, B:ballot, S:statement) = # TODO: beware alternation
            exists Q . member(V,Q) & forall N . member(N,Q) -> accept(N,B,S)
            
            action send_prepare(v:node, b:ballot, p:ballot, pp:ballot, nc:round, nh:round) = {
                require nc <= nh;
                require p < pp & p.x ~= pp.x;
                require ~(p ~= 0 & b.x ~= p.x);
                
                require B < b & x(B) ~= x(b) -> (condition_vote(v,B,abort) | ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                ));
                vote(v, B, abort) := vote(v, B, abort) | (B < b & x(B) ~= x(b) & condition_vote(v, B, abort));
                accept(v, B, abort) := accept(v, B, abort) | (B < b & x(B) ~= x(b) & ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                ));
                
                require B < p & x(B) ~= x(p) -> ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                );
                accept(v, B, abort) := accept(v, B, abort) | (B < p & x(B) ~= x(p));
                
                require B < pp & x(B) ~= x(pp) -> ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                );
                accept(v, B, abort) := accept(v, B, abort) | (B < pp & x(B) ~= x(pp));

                var hb:ballot;
                hb.n := nh;
                hb.x := b.x;
                
                if (nc ~= 0) {
                    # TODO maybe put next require outside (not required for the ensured properties at the end):
                    # NOTE: the following require is subsumed by the update to confirm in the next if block: the node will confirm those ballots, hence making the main invariant true
                    require B < hb & x(B) ~= x(hb) -> confirm(v, B, abort);
                    require ((nc <= n(B) | n(B) <= nh) & x(B) = x(b)) -> condition_vote(v, B, commit);
                    vote(v, B, commit) := vote(v, B, commit) | (nc <= n(B) & n(B) <= nh & x(B) = x(b));
                };

                if (nh ~= 0) {
                    require B < hb & x(B) ~= x(hb) -> condition_confirm(v, B, abort);
                    confirm(v, B, abort) := confirm(v, B, abort) | (B < hb & x(B) ~= x(hb));
                };
                
                # proved in Isabelle/HOL:
                ensure ~(intact(N1) & intact(N2) & accept(N1,B,S1) & accept(N2,B,S2) & S1 ~= S2);
                ensure ~(intact(N1) & intact(N2) & confirm(N1,B,S1) & confirm(N2,B,S2) & S1 ~= S2);
            }

            action send_commit(v:node, b:ballot, np:round, nc:round, nh:round) = {

                require nc ~= 0 & nh ~= 0;
                
                require nc <= n(B) & n(B) <= nh & x(B) = x(b) -> ( # condition_accept(v,B,commit)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,commit) | accept(N,B,commit)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,commit))
                );
                accept(v, B, commit) := accept(v, B, commit) | (nc <= n(B) & n(B) <= nh & x(B) = x(b));
                    
                require x(B) ~= x(b) -> (condition_vote(v,B,abort) | ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                ));
                vote(v, B, abort) := vote(v, B, abort) | (x(B) ~= x(b) & condition_vote(v, B, abort));
                accept(v, B, abort) := accept(v, B, abort) | (x(B) ~= x(b) & ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                ));

                require n(B) < np & x(B) ~= x(b) -> ( # condition_accept(v,B,abort)
                (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
                | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort))
                );
                accept(v, B, abort) := accept(v, B, abort) | (n(B) < np & x(B) ~= x(b));
                # TODO: why not same with pp?
              
                var hb:ballot;
                hb.n := nh;
                hb.x := b.x;
                require B < hb & x(B) ~= x(hb) -> condition_confirm(v, B, abort);
                confirm(v, B, abort) := confirm(v, B, abort) | (B < hb & x(B) ~= x(hb));

                # TODO:
                # var cb:ballot;
                # cb.n := nc;
                # cb.x := b.x;
                # require accept(v, cb, commit);
                # # TODO: the following is not clear
                # require n(B) <= nc & x(B) ~= x(b) -> confirm(v, B, abort);
                # require nc <= n(B) & x(B) = x(b) -> condition_vote(v, B, commit);
                # vote(v, B, commit) := vote(v, B, commit) | (nc <= n(B) & x(B) = x(b));
                
                # proved in Isabelle/HOL:
                ensure ~(intact(N1) & intact(N2) & accept(N1,B,S1) & accept(N2,B,S2) & S1 ~= S2);
                ensure ~(intact(N1) & intact(N2) & confirm(N1,B,S1) & confirm(N2,B,S2) & S1 ~= S2);
            }

            action do_accept(n:node, b:ballot, s:statement) = {
                require (exists Q . member(n,Q) & forall N . member(N,Q) -> (vote(N,b,s) | accept(N,b,s))) | (exists B . blocking(n,B) & forall N . bset_member(N,B) -> accept(N,b,s));
                accept(n, b, s) := true;
                ensure ~(intact(N1) & intact(N2) & accept(N1,b,S1) & accept(N2,b,S2) & S1 ~= S2);
            }

            action do_confirm(n:node, b:ballot, s:statement) = {
                require exists Q . member(n,Q) & forall N . member(N,Q) -> accept(N,b,s);
                confirm(n,b,s) := true;
                ensure ~(intact(N1) & intact(N2) & confirm(N1,b,S1) & confirm(N2,b,S2) & S1 ~= S2);
            }

            export send_prepare
            export do_accept
            export do_confirm
            export send_commit
        }
    }
} with abstract_protocol.isabelle_axiomatization, value, round, ballot_order, commit_abort_iso


    # relation accepted_prepared(N:node, B:ballot)
    # definition accepted_prepared(v:node, b:ballot) =
    #     B < b & B.x ~= b.x -> (
    #         (exists Q . member(v,Q) & forall N . member(N,Q) -> (vote(N,B,abort) | accept(N,B,abort)))
    #         | (exists BL . blocking(v,BL) & forall N . bset_member(N,BL) -> accept(N,B,abort)) )
    
    # action send_prepare(n:node, b:ballot, p:ballot, pp:ballot, nc:round, np:round) = {
    #     require ~(p ~= zero & p <= pp);
    #     require ~(p ~= zero & p.x = pp.x);
    #     require B < b & B.x ~= b.x -> ((forall S . ~(vote(n, B, S) & S ~= abort)) | condition_accept(n, B, abort));
    #     require B < p & B.x ~= p.x -> condition_accept(n, B, abort);
    #     require B < pp & B.x ~= pp.x -> condition_accept(n, B, abort);
        
    # }

    # action accept_prepared(n:node, b:ballot) = {
    #     require B <= b & x(B) ~= b.x -> condition_accept(n,B,abort);
    #     accept(n,B,S) := accept(n,B,S) | (B <= b & x(B) ~= b.x & S = abort);
    # } 



# models the SCP protocol for one given slot
isolate scp = {
    
    type phase = {prepare, confirm, externalize}

    relation prepare_msg(N:node, B:ballot, P:ballot, PP:ballot, NC:round, NH:round)
    relation confirm_msg(N:node, NP:round, C:ballot, NH:round)
    relation externalize_msg(N:node, C:ballot, NH:round)

    after init {
        prepare_msg(N,B,P,PP,NC,NH) := false;
        confirm_msg(N,NP,C,NH) := false;
        externalize_msg(N,C,NH) := false
    }

    # meaning of the messages:
    relation vote_or_accept_abort(V:node, B:ballot)
    definition vote_or_accept_abort(v:node, b:ballot) =
    (exists B,P,PP,NC,NH . b < B & b.x ~= x(B) & prepare_msg(v,B,P,PP,NC,NH))
    relation accept_abort(N:node, B:ballot)
    definition accept_abort(v:node, b:ballot) =
    exists P . b < P & b.x ~= x(P) & exists B,P2,NC,NH . prepare_msg(v,B,P,P2,NC,NH) | prepare_msg(v,B,P2,P,NC,NH) # TODO: quantifiers are going to cause problems.
    
    object server(self:node) = {
        individual ph:phase
        individual b:ballot
        individual p:ballot
        individual pp:ballot
        individual c:ballot
        individual h:ballot
        individual z:value

        after init {
            ph := prepare;
            b.n := 0.next;
            b.x := z;
            p := zero;
            pp := zero;
            c := zero;
            h := zero;
        }

        # update from the nomination protocol
        action upd_z(v:value) = {
            require h = zero;
            require v ~= 0;
            z := v
        }

        action send_prepare = {
            require ph = prepare;
            prepare_msg(self, b, p, pp, c.n, h.n) := true;
            call abstract_protocol.isabelle_axiomatization.send_prepare(self, b, p, pp, c.n, h.n);
        }

        # b is newly accepted as prepared
        action act_1(b:ballot) = {
            require b.x ~= 0;
            require ph = prepare;
            # we can accept b as prepared:
            require (B < b & x(B) ~= b.x) -> (
                (exists Q . member(self,Q) & forall N . member(N,Q) -> vote_or_accept_abort(N,B))
                | (exists BL . blocking(self,BL) & forall N . bset_member(N,BL) -> accept_abort(N,B)));
            
            if (pp < b & b < p & b.x ~= p.x) {
                pp := b
            };
            if (p < b) {
                if (b.x = p.x) {
                    p := b
                }
                else {
                    pp := p;
                    p := b
                }
            };

            # call ballot_protocol.accept_prepared(n, b);
        }


        invariant c <= h
        invariant ~(p ~= zero & p <= pp)
        invariant ~(p ~= zero & p.x = pp.x)
        invariant ~(c ~= zero & (c.x ~= h.x | h.x ~= b.x | ~(h <= b)))
        invariant ~(h ~= zero & z ~= h.x)

        export upd_z
        export act_1
        export send_prepare
    }
} with ballot_zero_iso, ballot_order, abstract_protocol, abstract_protocol.isabelle_axiomatization
