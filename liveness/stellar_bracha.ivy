#lang ivy1.7

object protocol = {

    # axiomatization
    
    type node
    relation intact(N:node)
    relation well_behaved(N:node)

    type value
    
    type nset
    relation member(N:node, Q:nset)
    relation is_quorum(Q:nset)
    relation blocks(Q:nset, N:node)

    axiom (exists N1 . intact(N1) & is_quorum(Q1) & member(N1,Q1)) & (exists N2 . intact(N2) & is_quorum(Q2) & member(N2,Q2)) -> exists N3 . intact(N3) & member(N3,Q1) & member(N3,Q2)

    axiom ~(intact(N) & ~well_behaved(N))

    axiom intact(N) & is_quorum(Q) -> blocks(Q,N)
    axiom (exists N . intact(N) & blocks(Q,N)) -> exists N2 . member(N2,Q) & intact(N2)

    axiom exists Q . (forall N . member(N,Q) <-> intact(N)) & is_quorum(Q)
    
    # the protocol

    relation proposal(V:value)
    relation vote(N:node, B:value)
    relation accept(N:node, B:value)
    relation confirm(N:node, B:value)

    relation received_vote(N1:node, N2:node, V:value)
    relation received_accept(N1:node, N2:node, V:value)
    relation received_proposal(N1:node, V:value)

    individual sender:node

    after init {
        vote(N,B) := false;
        accept(N,B) := false;
        confirm(N,B) := false;
        received_vote(N1,N2,V) := false;
        received_accept(N1,N2,V) := false;
        received_proposal(N,V) := false;
        proposal(V) := false;
        
        l2s_d(N:node) := true; # there are finitely many nodes
    }

    action propose(v:value) = {
        assume ~proposal(V);
        proposal(v) := true
    }

    action receive_proposal(n:node, v:value) = {
        assume proposal(v);
        received_proposal(n, v) := true;
        if forall B . ~vote(n,B) {
            vote(n,v) := true;
        }
    }

    action receive_vote(n1:node, n2:node, v:value) = {
        assume vote(n2,v);
        received_vote(n1,n2,v) := true;
        if ((forall V . ~accept(n1,V)) & exists Q .  is_quorum(Q) & member(n1,Q) &
        (forall N . member(N,Q) -> (received_vote(n1,N,v) | received_accept(n1,N,v)))) {
            accept(n1,v) := true;
        }
    }
    
    action receive_accept(n1:node, n2:node, v:value, q:nset) = {
        assume accept(n2,v);
        received_accept(n1,n2,v) := true;
        if (exists Q . ~confirm(n1,V) & is_quorum(Q) & member(n1,Q) &
        forall N . member(N,Q) -> received_accept(n1,N,v)) {
            confirm(n1,v) := true;
        }
    }

    action byz_action = {
        vote(N,V) := *;
        assume ~(well_behaved(N) & (vote(N,V) ~= old vote(N,V)));
        accept(N,V) := *;
        assume ~(well_behaved(N) & (accept(N,V) ~= old accept(N,V)));
        confirm(N,V) := *;
        assume ~(well_behaved(N) & (confirm(N,V) ~= old confirm(N,V)));
        received_proposal(N,V) := *;
        assume ~(well_behaved(N) & (received_proposal(N,V) ~= old received_proposal(N,V)));
        received_vote(N1,N2,V) := *;
        assume ~(well_behaved(N1) & well_behaved(N2) & (received_vote(N1,N2,V) ~= old received_vote(N1,N2,V)));
        received_accept(N1,N2,V) := *;
        assume ~(well_behaved(N1) & well_behaved(N2) & (received_accept(N1,N2,V) ~= old received_accept(N1,N2,V)));
        proposal(V) := *;
        assume ~(well_behaved(sender) & (proposal(V) ~= old proposal(V)))
    }

    export byz_action
    export receive_proposal
    export receive_accept
    export receive_vote
    export propose

    # safety:
    # the main safety property: 
    conjecture intact(N1) & intact(N2) & confirm(N1,B1) & confirm(N2,B2) -> B1 = B2
    conjecture well_behaved(N) & vote(N,V1) & vote(N,V2) -> V1 = V2
    conjecture (exists N . intact(N) & confirm(N,B)) -> exists Q . is_quorum(Q) & (exists N3 . intact(N3) & member(N3,Q)) & (forall N2 . member(N2,Q) & intact(N2) -> accept(N2,B))
    conjecture well_behaved(N) & well_behaved(sender) & received_proposal(N,V) -> proposal(V)
    conjecture (exists N . intact(N) & accept(N,V)) -> exists Q . is_quorum(Q) & (exists N3 . intact(N3) & member(N3,Q)) & (forall N2 . member(N2,Q) & intact(N2) -> vote(N2,V))
    conjecture well_behaved(N) & well_behaved(N2) & received_vote(N,N2,V) -> vote(N2,V)
    conjecture well_behaved(N) & well_behaved(N2) & received_accept(N,N2,V) -> accept(N2,V)

    # liveness:
    isolate liveness = {
        
        individual v0:value # we will assume that the sender is intact and eventually broadcasts v0
        individual n0:node # prophecy witness for accept
        individual n1:node # prophecy witness for confirm

        object spec = {
            
            temporal property (
            ((exists N1 . intact(N1) & (globally ~accept(N1,v0))) -> (intact(n0) & (globally ~accept(n0,v0)))) & # the accept prophecy witness
            ((exists N1 . intact(N1) & (globally ~confirm(N1,v0))) -> (intact(n1) & (globally ~confirm(n1,v0)))) & # the confirm prophecy witness
            intact(sender) &
            (eventually proposal(v0)) &
            # next 3 lines are fairness conditions
            (globally forall N1,N2,V . intact(N1) & intact(N2) & vote(N1,V) -> eventually received_vote(N2,N1,V)) &
            (globally forall N,V . intact(N) & proposal(V) -> eventually received_proposal(N,V)) &
            (globally forall N1,N2,V . intact(N1) & intact(N2) & accept(N1,V) -> eventually received_accept(N2,N1,V))
            ) -> forall N . intact(N) -> eventually confirm(N,v0)
        }

        object impl = {
            # basic temporal info trivially following from the assumptions:
            conjecture eventually proposal(v0)
            conjecture globally forall N1,N2,V . intact(N1) & intact(N2) & vote(N1,V) -> eventually received_vote(N2,N1,V)
            conjecture globally forall N1,N2,V . intact(N1) & intact(N2) & accept(N1,V) -> eventually received_accept(N2,N1,V)
            conjecture globally forall N,V . intact(N) & proposal(V) -> eventually received_proposal(N,V)
            conjecture exists N . intact(N) & globally ~confirm(N,v0)
            conjecture intact(N1) & (globally ~accept(N1,v0)) -> (intact(n0) & (globally ~accept(n0,v0)))
            conjecture intact(N1) & (globally ~confirm(N1,v0)) -> (intact(n1) & (globally ~confirm(n1,v0)))     
            conjecture intact(sender)

            # the v0 proposal is eventually received and voted for before the freeze point:
            conjecture proposal(V1) & proposal(V2) -> V1 = V2
            conjecture well_behaved(N) & ~received_proposal(N,V) -> ~vote(N,V)
            conjecture intact(N) & received_proposal(N,v0) -> vote(N,v0)
            
            conjecture ~($l2s_w . proposal(v0)) -> proposal(v0)
            conjecture l2s_frozen & proposal(V) -> V = v0
            conjecture well_behaved(N) & l2s_frozen & received_proposal(N,V) -> V = v0
            conjecture V=v0 & well_behaved(N) & ~($l2s_w N,V . received_proposal(N,V))(N,V) -> ((globally ~received_proposal(N,V)) | received_proposal(N,V))
            # now we have:
            # conjecture l2s_frozen & intact(N) -> received_proposal(N,v0)
            # and thus:
            # conjecture l2s_frozen & intact(N) -> vote(N,v0)

            # intact nodes accept v0 before the freeze point:
            conjecture V=v0 & well_behaved(N1) & well_behaved(N2) & ~($l2s_w N1,N2,V . received_vote(N1,N2,V))(N1,N2,V) -> ((globally ~received_vote(N1,N2,V)) | received_vote(N1,N2,V))
            conjecture l2s_frozen & intact(N1) & intact(N2) -> received_vote(N1,N2,v0)
            conjecture intact(n0) & (globally ~accept(n0,v0)) -> (exists N1 . intact(N1) & ~received_vote(n0,N1,v0))
            conjecture intact(N) & ~($l2s_w N . accept(N,v0))(N) -> ((globally ~accept(N,v0)) | accept(N,v0))
            # now we have:
            # conjecture l2s_frozen & intact(N) -> accept(N,v0)
            
            
            # intact nodes confirm v0 before the freeze point:
            conjecture V=v0 & well_behaved(N1) & well_behaved(N2) & ~($l2s_w N1,N2,V . received_accept(N1,N2,V))(N1,N2,V) -> ((globally ~received_accept(N1,N2,V)) | received_accept(N1,N2,V))
            conjecture l2s_frozen & intact(N1) & intact(N2) -> received_accept(N1,N2,v0)
            conjecture intact(n1) & (globally ~confirm(n1,v0)) -> (exists N1 . intact(N1) & ~received_accept(n1,N1,v0))
            conjecture intact(N) & ~($l2s_w N . confirm(N,v0))(N) -> ((globally ~confirm(N,v0)) | confirm(N,v0))
            # now we have: l2s_frozen & intact(N) -> confirm(N,v0);
            # at this point we are done because we have assumed that an intact node never confirms v0, which is a contradiction; therefore we never enter state frozen and the error state is unreachable
    }
    
    } with this
}
